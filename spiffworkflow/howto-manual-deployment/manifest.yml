---
defaults: &defaults
  disk_quota: 3G
  instances: 1
  default-route: false
applications:

#################################
- name: spiffworkflow((slug))-connector
  <<: *defaults
  memory: 256M
  disk_quota: 3G
  health-check-type: http
  health-check-http-endpoint: /liveness
  routes:
    - route: spiffworkflow((slug))-connector.apps.internal
  docker:
    image: ((connector-image))
  command: |
    # Make sure the Cloud Foundry-provided CA is recognized when making TLS connections
    cat /etc/cf-system-certificates/* > /usr/local/share/ca-certificates/cf-system-certificates.crt
    /usr/sbin/update-ca-certificates
    /app/bin/boot_server_in_docker
  env:
    FLASK_ENV: "${FLASK_ENV:-development}"
    FLASK_DEBUG: "0"
    FLASK_SESSION_SECRET_KEY: ((connector-flask-secret-key))
    CONNECTOR_PROXY_PORT: "8080"
    REQUESTS_CA_BUNDLE: /etc/ssl/certs/ca-certificates.crt

#################################
- name: spiffworkflow((slug))-backend
  <<: *defaults
  disk_quota: 3G
  health-check-http-endpoint: /api/v1.0/status
  health-check-type: http
  routes:
    - route: spiffworkflow((slug)).app.cloud.gov/api
  services:
    - ((db-instance))
  docker:
    image: ((backend-image))
  memory: 512M
  command: |
    # Get the postgres URI from the service binding. (SQL Alchemy insists on "postgresql://".ðŸ™„)
    export SPIFFWORKFLOW_BACKEND_DATABASE_URI=$( echo $VCAP_SERVICES | jq -r '.["aws-rds"][].credentials.uri' | sed -e s/postgres/postgresql/ )

    # Make sure the Cloud Foundry-provided CA is recognized when making TLS connections
    cat /etc/cf-system-certificates/* > /usr/local/share/ca-certificates/cf-system-certificates.crt
    /usr/sbin/update-ca-certificates

    # Verify that this is working. It should return '{"ok": true}'
    # curl https://spiffworkflow((slug))-connector.apps.internal:61443/liveness

    /app/bin/clone_process_models
    /app/bin/boot_server_in_docker
  env:
    APPLICATION_ROOT: "/"
    FLASK_SESSION_SECRET_KEY: ((backend-flask-session-key))
    FLASK_DEBUG: "0"
    # This is necessary for Python to pick up custom CAs
    REQUESTS_CA_BUNDLE: "/etc/ssl/certs/ca-certificates.crt"

    # All of the configuration variables are documented here:
    # spiffworkflow-backend/src/spiffworkflow_backend/config/default.py
    SPIFFWORKFLOW_BACKEND_BPMN_SPEC_ABSOLUTE_DIR: "/app/process_models"
    SPIFFWORKFLOW_BACKEND_CHECK_FRONTEND_AND_BACKEND_URL_COMPATIBILITY: "false"
    SPIFFWORKFLOW_BACKEND_CONNECTOR_PROXY_URL: "https://spiffworkflow((slug))-connector.apps.internal:61443"
    SPIFFWORKFLOW_BACKEND_DATABASE_TYPE: "postgres"
    SPIFFWORKFLOW_BACKEND_ENV: "local_docker"
    SPIFFWORKFLOW_BACKEND_EXTENSIONS_API_ENABLED: "true"
    SPIFFWORKFLOW_BACKEND_GIT_COMMIT_ON_SAVE: "true"
    SPIFFWORKFLOW_BACKEND_GIT_PUBLISH_CLONE_URL: ((git-process-models-repo))
    SPIFFWORKFLOW_BACKEND_GIT_PUBLISH_TARGET_BRANCH: ((target-branch-for-publish))

    # This branch needs to exist, otherwise we can't clone it at startup and startup fails
    SPIFFWORKFLOW_BACKEND_GIT_SOURCE_BRANCH: ((source-branch))
    SPIFFWORKFLOW_BACKEND_GIT_SSH_PRIVATE_KEY: ((github-ssh-key))
    SPIFFWORKFLOW_BACKEND_LOAD_FIXTURE_DATA: "false"
    SPIFFWORKFLOW_BACKEND_LOG_LEVEL: "INFO"
    SPIFFWORKFLOW_BACKEND_OPEN_ID_CLIENT_ID: "spiffworkflow-backend"
    SPIFFWORKFLOW_BACKEND_OPEN_ID_CLIENT_SECRET_KEY: "((openid-secret))"
    SPIFFWORKFLOW_BACKEND_OPEN_ID_SERVER_URL: "https://spiffworkflow((slug)).app.cloud.gov/api/openid"
    SPIFFWORKFLOW_BACKEND_PERMISSIONS_FILE_NAME: "example.yml"
    SPIFFWORKFLOW_BACKEND_PORT: "8080"
    SPIFFWORKFLOW_BACKEND_RUN_BACKGROUND_SCHEDULER_IN_CREATE_APP: "true"
    SPIFFWORKFLOW_BACKEND_UPGRADE_DB: "true"
    SPIFFWORKFLOW_BACKEND_URL: "https://spiffworkflow((slug)).app.cloud.gov/api"
    SPIFFWORKFLOW_BACKEND_URL_FOR_FRONTEND: "https://spiffworkflow((slug)).app.cloud.gov"
    SPIFFWORKFLOW_BACKEND_USE_WERKZEUG_MIDDLEWARE_PROXY_FIX: "true"
    SPIFFWORKFLOW_BACKEND_WSGI_PATH_PREFIX: "/api"

################################
- name: spiffworkflow((slug))-frontend
  <<: *defaults
  routes:
    - route: spiffworkflow((slug)).app.cloud.gov
  docker:
    image: ((frontend-image))
  memory: 256M
  health-check-type: port
  env:
    APPLICATION_ROOT: "/"
    PORT0: "80"
    SPIFFWORKFLOW_FRONTEND_RUNTIME_CONFIG_APP_ROUTING_STRATEGY: "path_based"
    SPIFFWORKFLOW_FRONTEND_RUNTIME_CONFIG_BACKEND_BASE_URL: "https://spiffworkflow((slug)).app.cloud.gov/api"
    BACKEND_BASE_URL: "https://spiffworkflow((slug)).app.cloud.gov/api"
    # We may need to set BACKEND_URL; see spiffworkflow-frontend/src/config/tsx:15-72

    # Other vars this image understands:
    # CYPRESS_RECORD_KEY
    # SPIFFWORKFLOW_FRONTEND_PORT
    # SPIFFWORKFLOW_FRONTEND_URL
    # CYPRESS_RECORD_KEY
    # REACT_APP_BACKEND_BASE_URL
    # PUBLIC_URL
    # NODE_ENV
